#include <SFML/Graphics.hpp> // Подключение графики SFML
#include <time.h> // Время для rand
#include <sstream> // Поток для отображения очков
#include <iostream>
#include <windows.h>
#include <dos.h>
#include <stdio.h>
#include <conio.h>
#include <chrono>
#include <thread>
using namespace sf; // sf пространство для удобства


unsigned int EggRand(unsigned int& EggDir) // Принимаем адрес переменной сценария
{
    EggDir = rand() % 4; // Присваиваем рандом от 0 до 3
    return EggDir; // Возвращаем значение
}
/////////////////////////////////////////////////////////////////////////////////////




int main()
{
    //-------------------Привязка ко времени -------------------------
    Clock clock; // Переменная времени
//----------------------Создание окна ----------------------------
    RenderWindow window(VideoMode(800, 600), "AMIR LOVIT EGGS");
    //----------------------Создание персонажа -----------------------
    Image Lupus; // Создаем объект изображения
    Lupus.loadFromFile("Lupus.png"); // Подгружаем картинку
    Lupus.createMaskFromColor(Color(255, 255, 255)); // Используем загрузку через Image только ради маски(убираем белый фон программно)

    Texture Lupust; // Создаем текстуру для персонажа
    Lupust.loadFromImage(Lupus); // Подгружаем картинку в текстуру

    Sprite Lupuss; // Создаем спрайт для персонажа
    Lupuss.setTexture(Lupust); // Текстуру заливаем в спрайт
    Lupuss.setTextureRect(IntRect(0, 0, 315, 281)); // Вырезаем кадр из спрайта
    Lupuss.setPosition(242.5, 300); // Координаты куда рисуем
//----------------------Контроль состояния -----------------------
    int direction(0); // Будет принимать от 0 до 3 в зависимости от состояния
//------------------------Создание фона --------------------------
    Texture Background; // Создаем текстуру для фона
    Background.loadFromFile("Background.png"); // Заливаем картинку сразу в текстуру

    Sprite Back; // Создаем спрайт для фона
    Back.setTexture(Background); // Заливаем текстуру в спрайт
//-------------------------Создание яйца -------------------------
    Image eggI; // Создаем объект изображения
    eggI.loadFromFile("Egg.png"); // Подгружаем картинку
    eggI.createMaskFromColor(Color(255, 255, 255)); // Используем загрузку через Image только ради маски(убираем белый фон программно)
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Texture eggT; // Создаем текстуру для яйца
    eggT.loadFromImage(eggI); // Подгружаем картинку в текстуру
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Sprite egg; // Создаем спрайт для яйца
    egg.setTexture(eggT); // Текстуру заливаем в спрайт
    egg.setTextureRect(IntRect(0, 0, 46, 62)); // Вырезаем кадр из спрайта
    egg.setPosition(100, 100); // Координаты куда рисуем
    egg.setOrigin(23, 31); // Отсчет координа из центра для вращения
    double speed(0.1); // Скорость вращения яйца
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




//-------------------------Движение яйца -------------------------
        // Рассмотрим четыре сценария появления и движения яйца
    srand(time(NULL)); // Генерация псевдослучайных чисел
    unsigned int EggDir; // Переменная сценария (принимает значение от 0 до 3)
    EggDir = EggRand(EggDir) % 4; // Выбирается позиция яйца рандомно через функцию EggRand
    bool force = true; // Состояние яйца
    int tmp(0); // Храним итерацию для setPosition
    int count(0); // Считаем очки
    int lose(3); // Считаем жизни
    //////////////////////////////////////////////////////////////////////////////////////////////


    


 


//---------------------Вывод очков и жизни -----------------------
    Font font; // Создаем шрифт
    font.loadFromFile("CyrilicOld.ttf"); // Подгружаем наш шрифт
    Text CountText("", font, 40); // Создаем текст с путой строкой
    CountText.setOutlineColor(Color::Black);// Задаем цвет
    CountText.setPosition(10, 10);//задаем позицию текста, центр камеры

    Text life("", font, 40); // Создаем текст с путой строкой
    life.setOutlineColor(Color::Black);// Задаем цвет
    life.setPosition(600, 10);//задаем позицию текста, центр камеры


//--------------------Основной цикл программы --------------------
    while (window.isOpen()) // Пока окно открыто
    {
        float time = clock.getElapsedTime().asMicroseconds(); // Ласт тайм в микросекундах
        clock.restart(); // Перезагружаем тайм
        time = time / 800;
        Event event;


        while (window.pollEvent(event)) // Обработка события "закрытие окна"
        {
            if ((event.type == Event::Closed) || (Keyboard::isKeyPressed(Keyboard::Q)))
                window.close(); //  Закрываем окно если нажат крестик или Q
        }

        
        //--Подблок в основном цикле программы - "Обработка объектов egg" --
                // В нашей игре яйца будут появляться последовательно,что разрешает отказаться от динамической памяти
        egg.rotate(speed * time); // Постоянно вращаем яйцо со скорость speed
     
        if (lose == 0) { window.close(); } // Если жизни закончились выходим из игры





            //Яйцо
        if (true)
        {
            if (force) // Если яйцо еще не разбилось или не было поймано
            {
                if (EggDir == 0) // Яйцо катится слева сверху
                {
                    if (!tmp)egg.setPosition(0, 153); // Если первая итерация то перемещаем яйцо в нужную позицию
                    egg.move(0.15 * time, 0); // Двигаем яйцо
                    tmp++; // Итерация уже не первая
                    if (egg.getPosition().x >= 230) // Если палка по которой катиться яйцо закончилась
                    {
                        egg.move(0, 0.15 * time); // Двигаем яйцо вниз
                        if (egg.getPosition().x >= 275)egg.move(-0.15 * time, 0); // Если выровнялись то балансируем наклонное движение
                        //Если яйцо в диапазоне корзины и волк стоит правильно яйцо поймали,яйцо переместили(false),итерацию обнулили,очки зачли
                        if ((egg.getPosition().y > 300) && (direction == 1) && (egg.getPosition().y < 320)) { force = false; tmp = 0; count++; }
                        // Если яйцо упало,яйцо переместили,итерацию обнулили,жизнь вычли
                        if (egg.getPosition().y >= 500) { force = false; tmp = 0; lose--; }
                    }




                }

                if (EggDir == 1) // Яйцо катится справа сверху
                {
                    if (!tmp)egg.setPosition(800, 153); // Если первая итерация то перемещаем яйцо в нужную позицию
                    egg.move(-0.15 * time, 0); // Двигаем яйцо
                    tmp++; // Итерация уже не первая
                    if (egg.getPosition().x <= 530) // Если палка по которой катиться яйцо закончилась
                    {
                        egg.move(0, 0.15 * time);  // Двигаем яйцо вниз
                        if (egg.getPosition().x <= 520)egg.move(0.15 * time, 0); // Если выровнялись то балансируем наклонное движение
                        //Если яйцо в диапазоне корзины и волк стоит правильно яйцо поймали,яйцо переместили(false),итерацию обнулили,очки зачли
                        if (((egg.getPosition().y > 300) && (direction == 0)) && (egg.getPosition().y < 320)) { force = false; tmp = 0; count++; }
                        // Если яйцо упало,яйцо переместили,итерацию обнулили,жизнь вычли
                        if (egg.getPosition().y >= 500) { force = false; tmp = 0; lose--; }
                    }


                }
                if (EggDir == 2) // Яйцо катится слева снизу
                {
                    if (!tmp)egg.setPosition(0, 353); // Если первая итерация то перемещаем яйцо в нужную позицию
                    egg.move(0.15 * time, 0); // Двигаем яйцо
                    tmp++; // Итерация уже не первая
                    if (egg.getPosition().x >= 230) // Если палка по которой катиться яйцо закончилась
                    {
                        egg.move(0, 0.15 * time); // Двигаем яйцо вниз
                        if (egg.getPosition().x >= 275)egg.move(-0.15 * time, 0); // Если выровнялись то балансируем наклонное движение
                        //Если яйцо в диапазоне корзины и волк стоит правильно яйцо поймали,яйцо переместили(false),итерацию обнулили,очки зачли
                        if ((egg.getPosition().y > 400) && (direction == 3) && (egg.getPosition().y < 420)) { force = false; tmp = 0; count++; }
                        // Если яйцо упало,яйцо переместили,итерацию обнулили,жизнь вычли
                        if (egg.getPosition().y >= 500) { force = false; tmp = 0; lose--; }
                    }

                }
                if (EggDir == 3) // Яйцо катится справа снизу
                {
                    if (!tmp)egg.setPosition(800, 353); // Если первая итерация то перемещаем яйцо в нужную позицию
                    egg.move(-0.15 * time, 0); // Двигаем яйцо
                    tmp++; // Итерация уже не первая
                    if (egg.getPosition().x <= 530) // Если палка по которой катиться яйцо закончилась
                    {
                        egg.move(0, 0.15 * time); // Двигаем яйцо вниз
                        if (egg.getPosition().x <= 520)egg.move(0.15 * time, 0); // Если выровнялись то балансируем наклонное движение
                        //Если яйцо в диапазоне корзины и волк стоит правильно яйцо поймали,яйцо переместили(false),итерацию обнулили,очки зачли
                        if (((egg.getPosition().y > 400) && (direction == 2)) && (egg.getPosition().y < 420)) { force = false; tmp = 0; count++; }
                        // Если яйцо упало,яйцо переместили,итерацию обнулили,жизнь вычли
                        if (egg.getPosition().y >= 500) { force = false; tmp = 0; lose--; }
                    }

                }
            }


            else // Если force=false, значит яйцо или поймано или разбилось, делаем снова true и перемещаем на новое направление
            {
                EggDir = EggRand(EggDir);// Вызываем функцию генерации случайного события для появления яйца
                force = true; // Яйцо "живое"

            }
        }

       

                                                     
       

        //--------Подблок в основном цикле программы - "Управление" -------
        if (Keyboard::isKeyPressed(Keyboard::Right)) // Если жмем направо
        {
            if (direction == 1) { Lupuss.setTextureRect(IntRect(0, 0, 315, 281)); direction = 0; } // Если стояли и смотрели налево, меняем флаг состояния
            if (direction == 3) { Lupuss.setTextureRect(IntRect(338, 0, 360, 281)); direction = 2; } // Если сидели и смотрели налево, меняем флаг состояния
        }
        if (Keyboard::isKeyPressed(Keyboard::Left)) // Если жмем налево
        {
            if (direction == 0) { Lupuss.setTextureRect(IntRect(0 + 315, 0, -315, 281)); direction = 1; } // Если стояли и смотрели направо, меняем флаг состояния
            if (direction == 2) { Lupuss.setTextureRect(IntRect(338 + 360, 0, -360, 281)); direction = 3; } // Если сидели и смотрели направо, меняем флаг состояния
        }
        if (Keyboard::isKeyPressed(Keyboard::Up)) // Если жмем вверх
        {
            if (direction == 2) { Lupuss.setTextureRect(IntRect(0, 0, 315, 281)); direction = 0; } // Если сидели и смотрели направо, меняем флаг состояния
            if (direction == 3) { Lupuss.setTextureRect(IntRect(0 + 315, 0, -315, 281)); direction = 1; } // Если сидели и смотрели налево, меняем флаг состояния
        }
        if (Keyboard::isKeyPressed(Keyboard::Down)) // Если жмем вниз
        {
            if (direction == 0) { Lupuss.setTextureRect(IntRect(338, 0, 360, 281)); direction = 2; } // Если стояли и смотрели направо, меняем флаг состояния 
            if (direction == 1) { Lupuss.setTextureRect(IntRect(338 + 360, 0, -360, 281)); direction = 3; } // Если стояли и смотрели налево, меняем флаг состояния
        }
        //--------Подблок в основном цикле программы - "Обновление" -------
        window.clear(); // Очищаем экран
        window.draw(Back); // Рисуем фон
        window.draw(Lupuss); // Рисуем персонажа
        window.draw(egg); // Рисуем яйцо
        
//--------------------------Выводим текст--------------------------
//      

        // Яйца
        std::ostringstream CountEgg;
        CountEgg << count; // В поток кидаем количество пойманых яиц
        CountText.setString("Собрано яиц: " + CountEgg.str());// В потоке инт преобразуем в строку
        window.draw(CountText);// Рисуем текст
       
        // Жизни
        std::ostringstream CountLife;
        CountLife << lose; // В поток кидаем количество жизни
        life.setString("Жизни: " + CountLife.str());// В потоке инт преобразуем в строку
        window.draw(life);// Рисуем текст

        window.display(); // Выводим на экран
    }
    return 0;
}
